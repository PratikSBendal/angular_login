{"ast":null,"code":"import { environment } from 'src/env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/__service/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    // add auth header with jwt if user is logged in and request is to the api url\n    const user = this.accountService.userValue;\n    const isLoggedIn = user?.token;\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\n    if (isLoggedIn && isApiUrl) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["environment","JwtInterceptor","constructor","accountService","intercept","request","next","user","userValue","isLoggedIn","token","isApiUrl","url","startsWith","apiUrl","clone","setHeaders","Authorization","handle","_","i0","ɵɵinject","i1","AccountService","_2","factory","ɵfac"],"sources":["/home/pratik/Documents/angular/angular_login/src/app/__helper/jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/env';\nimport { AccountService } from '@app/__service/account.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private accountService: AccountService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add auth header with jwt if user is logged in and request is to the api url\n        const user = this.accountService.userValue;\n        const isLoggedIn = user?.token;\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\n        if (isLoggedIn && isApiUrl) {\n            request = request.clone({\n                setHeaders: { Authorization: `Bearer ${user.token}` }\n            });\n        }\n\n        return next.handle(request);\n    }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,SAAS;;;AAIrC,OAAM,MAAOC,cAAc;EACvBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAClD;IACA,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAACK,SAAS;IAC1C,MAAMC,UAAU,GAAGF,IAAI,EAAEG,KAAK;IAC9B,MAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;IAC3D,IAAIL,UAAU,IAAIE,QAAQ,EAAE;MACxBN,OAAO,GAAGA,OAAO,CAACU,KAAK,CAAC;QACpBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUV,IAAI,CAACG,KAAK;QAAE;OACtD,CAAC;;IAGN,OAAOJ,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC/B;EAAC,QAAAc,CAAA,G;qBAfQlB,cAAc,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdvB,cAAc;IAAAwB,OAAA,EAAdxB,cAAc,CAAAyB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}